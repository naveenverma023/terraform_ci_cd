name: Terraform CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}

jobs:
  terraform-ci:
    name: Terraform CI Pipeline
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Linting - Format Check
        run: |
            ls 
            fmt_check=$(terraform fmt -check) || echo "Generating the format check result..."
            if [ ! -z "$fmt_check" ]; then
              echo "The following files needs to be formatted: $fmt_check"
            else
              echo "All the files are formatted"
            fi

      - name: Linting - TFLint
        run: |
          echo "Installing tflint"
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          tflint --init
          tflint -f json | jq '.' || echo "The linting report is generated"

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Setup Infracost
        uses: infracost/actions/setup@v3
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Generate Infracost cost estimate baseline
        run: |
          infracost breakdown --path=. \
                              --format=json \
                              --out-file=/tmp/infracost-base.json

      - name: Security - tfsec
        uses: aquasecurity/tfsec-action@v1.0.0

      - name: Upload Infracost Report
        uses: actions/upload-artifact@v4
        with:
          name: infracost-report
          path: /tmp/infracost-breakdown.json

      - name: Drift Detection - Terraform Plan
        run: terraform plan -out=tfplan.binary

      - name: Upload Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: tfplan.binary

  terraform-cd:
    name: Terraform CD Pipeline
    needs: terraform-ci
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Download Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: .

      - name: Terraform Init
        run: terraform init

#      - name: Terraform Apply in Controlled Env
#        run: terraform apply -auto-approve tfplan.binary

      - name: Post-Deployment Verification - Smoke Test
        run: |
          echo "Testing provisioned load balancer endpoint"
          curl --fail --max-time 10 https://your-lb-endpoint.com || echo "Smoke test failed!"

      - name: Upload Terraform Logs and State
        run: |
          terraform show > terraform-output.log
        continue-on-error: true

      - name: Upload Terraform Output as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: terraform-output.log
